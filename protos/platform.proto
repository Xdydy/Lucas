syntax = "proto3";
package proto;
option go_package = "github.com/9triver/ignis/proto";

import "actor.proto";

// Language of supported object
enum Language {
  LANG_UNKNOWN = 0;
  LANG_JSON = 1; // Values that can be represented as JSON string, can be encoded/decoded
  LANG_GO = 2; // Values that are only compatible with Go actors.
  LANG_PYTHON = 3; // Values that are only compatible with Python actors.
}

message StoreRef {
  string ID = 1;
  actor.PID PID = 2;
}

message ActorRef {
  StoreRef Store = 1;
  string ID = 2;
  actor.PID PID = 3;
}

message ActorInfo {
  ActorRef Ref = 1;
  int64 CalcLatency = 2;
  int64 LinkLatency = 3;
}

// Flow is reference to real object or stream
message Flow {
  string ID = 1; // ID of referenced object or stream
  StoreRef Source = 2; // points to store actor of a single worker.
}

// EncodedObject stores a byte encoded object
message EncodedObject {
  string ID = 1; // if returned from ipc call, id won't be set
  bytes Data = 2; // serialized object data, or nil if current object is a stream
  StoreRef Source = 3; // points to store actor of the stream.
  Language Language = 4; // if is JSON, it can be decoded to either Go, Python, or else it can only be decoded to corresponding language.
  bool Stream = 5; // mark if the object is a stream
}

message StreamChunk {
  string StreamID = 1;
  string Target = 2; // TODO: 封装统一消息类型包含 replyTo 和 target
  bool EoS = 3;
  proto.EncodedObject Value = 4;
  string Error = 5;
}

// Invoke is sent to compute actor, providing a value to its dependency.
message Invoke {
  string Target = 1; // target actor reference
  string SessionID = 2; // id of current execution session
  string Param = 3; // name of parameter
  Flow Value = 4; // value of parameter
}

// InvokeStart is sent to compute actor before invoking.
// InvokeStart can be sent to compute actor before Invoke, since it is intended to provide
// reference to its successor and actor info for latency measurement.
message InvokeStart {
  ActorInfo Info = 1; // (optional) actor info for latency measurement, required when using actor group
  string SessionID = 2; // id of current execution session
  string ReplyTo = 3; // actor to reply to, usually points to calling controller actor
}

// InvokeResponse is sent to controller actor after invoking.
message InvokeResponse {
  string Target = 1; // target actor reference
  string SessionID = 2; // id of current execution session
  Flow Result = 3; // result object reference of the invocation
  string Error = 4; // (optional) error message
  ActorInfo Info = 5; // (optional) actor info for latency measurement, required when using actor group
}
