syntax = "proto3";
package proto;
option go_package = "github.com/9triver/ignis/proto/cluster";

import "platform.proto";

enum MessageType {
  UNSPECIFIED = 0; // unknown command type
  ACK = 1; // acknowledged
  READY = 2; // ready to receive messages
  INVOKE = 3; // invoke function
  INVOKE_START = 4; // invoke function start
  INVOKE_RESPONSE = 5; // invoke function response
  OBJECT_REQUEST = 6;
  OBJECT_RESPONSE = 7;
  STREAM_CHUNK = 8;
  FUNCTION = 9; // python function
}

// ObjectRequest requests object with ID, and the object is sent to ReplyTo, asynchronously.
// if the object is a stream, the stream **object** is sent to ReplyTo by ObjectRequest,
// but no real stream chunk is transmitted.
message ObjectRequest {
  string ID = 1;
  string Target = 2;
  string ReplyTo = 3;
}

message ObjectResponse {
  string ID = 1;
  string Target = 2;
  proto.EncodedObject Value = 3;
  string Error = 4;
}

message Envelope {
  proto.StoreRef Store = 1;
  MessageType Type = 2;
  oneof Message {
    ObjectRequest ObjectRequest = 3;
    ObjectResponse ObjectResponse = 4;
    proto.StreamChunk StreamChunk = 5;
  }
}

message Ack {
  string Error = 1;
}

message Ready {}

message Function {
  string Name = 1; // function name
  repeated string Params = 2; //function params
  repeated string Requirements = 3; // function dependencies
  bytes PickledObject = 4; // encoded function impl
  proto.Language Language = 5; // return type of function
}

message Message {
  MessageType Type = 1;
  string ConnID = 2;    // connection id: `${AppId}:${FuncName}`
  oneof Message {
    Ack Ack = 3;
    Ready Ready = 4;
    proto.Invoke Invoke = 5;
    proto.InvokeStart InvokeStart = 6;
    proto.InvokeResponse InvokeResponse = 7;
    ObjectRequest ObjectRequest = 8;
    ObjectResponse ObjectResponse = 9;
    proto.StreamChunk StreamChunk = 10;
    Function Function = 11;
  }
}

service Service {
  rpc Session(stream Message) returns (stream Message) {}
}