syntax = "proto3";
package controller;
option go_package = "github.com/9triver/ignis/proto/controller";

import "platform.proto";

enum CommandType {
  UNSPECIFIED = 0; // unknown command type
  ACK = 1; // acknowledged
  FR_READY = 2;
  FR_APPEND_DATA = 3; // frontend: append data node
  FR_APPEND_ACTOR = 4; // front: append actor (for debugging purpose)
  FR_APPEND_PY_FUNC = 5; // frontend: append python function (control node definition)
  FR_APPEND_PY_CLASS = 6; // frontend: append python class (control node definition)
  FR_APPEND_ARG = 7; // frontend: append function arg to specified actor
  FR_APPEND_CLASS_METHOD_ARG = 8; // frontend: append class method arg to specified actor
  FR_INVOKE = 9;
  BK_RETURN_RESULT = 10; // backend: send back execution result
  FR_REGISTER_REQUEST = 11; // backend: register application
  FR_DAG = 12; // frontend: send DAG structure
  FR_MARK_DAG_NODE_DONE = 13; // frontend: notify DAG node done
}

message Ack {
  string Error = 1;
}

message Ready {}

message Data {
  enum ObjectType {
    OBJ_UNSPECIFIED = 0;
    OBJ_REF = 1;
    OBJ_ENCODED = 2;
    OBJ_STREAM = 3;
  }

  ObjectType Type = 1;
  oneof Object {
    proto.Flow Ref = 2;
    proto.EncodedObject Encoded = 3;
  }
}

message AppendData {
  string SessionID = 1; // current execution session, empty if shared by all sessions
  proto.EncodedObject Object = 2; // encoded object
}

message AppendActor {
  string Name = 1; // actor name
  repeated string Params = 2; // function params
  proto.ActorRef Ref = 3; // Ref to actor
}

message Resources {
  int64 CPU = 1; // CPU cores
  int64 Memory = 2; // memory in Bytes
  int64 GPU = 3; // GPU cores
}

message AppendPyFunc {
  string Name = 1; // function name
  repeated string Params = 2; //function params
  string Venv = 3; // function virtual environment
  repeated string Requirements = 4; // function dependencies
  bytes PickledObject = 5; // encoded function impl
  proto.Language Language = 6; // return type of function
  Resources Resources = 7; // resources required by function
  int32 Replicas = 8; // number of replicas
}

message AppendPyClass {
  message ClassMethod {
    string Name = 1;
    repeated string Params = 2;
  }

  string Name = 1; // class name
  repeated ClassMethod Methods = 2;
  string Venv = 3; // function virtual environment
  repeated string Requirements = 4; // function dependencies
  bytes PickledObject = 5; // encoded function impl
  proto.Language Language = 6; // return type of function
  Resources Resources = 7; // resources required by class
  int32 Replicas = 8;
}

message AppendArg {
  string SessionID = 1; // current execution session
  string InstanceID = 2; // id of function instance under current execution session
  string Name = 3; // function name
  string Param = 4; // param name
  Data Value = 5; // object ref for param
}

message AppendClassMethodArg {
  string SessionID = 1; // current execution session
  string InstanceID = 2; // id of **class** instance under current execution session
  string MethodName = 3; // method name
  string Param = 4; // param name
  Data Value = 5; // object ref for param
}

message Invoke {
  string SessionID = 1; // current execution session
  string InstanceID = 2; // id of function instance under current execution session
  string Name = 3; // function name
}

message ReturnResult {
  string SessionID = 1; // current execution session
  string InstanceID = 2; // id of function instance under current execution session
  string Name = 3; // function name
  oneof Result {
    Data Value = 4; // success: return result
    string Error = 5; // fail: return error
  }
}

message RegisterRequest {
  string ApplicationID = 1;
}

// DAG Node Messages
message ControlNode {
  string Id = 1;
  bool Done = 2;
  string FunctionName = 3;
  map<string, string> Params = 4; // lambda_id -> parameter_name mapping
  int32 Current = 5;
  string DataNode = 6; // id of the output data node
  repeated string PreDataNodes = 7; // ids of input data nodes
  string FunctionType = 8; // "remote" or "local"
}

message DataNode {
  string Id = 1;
  bool Done = 2;
  string Lambda = 3; // lambda id
  bool Ready = 4;
  repeated string SufControlNodes = 5; // ids of successor control nodes
  optional string PreControlNode = 6; // id of predecessor control node (nullable)
  optional string ParentNode = 7; // id of parent data node (nullable)
  repeated string ChildNode = 8; // ids of child data nodes
}

message DAGNode {
  string Type = 1; // "ControlNode" or "DataNode"
  oneof Node {
    ControlNode ControlNode = 2;
    DataNode DataNode = 3;
  }
}

message DAG {
  repeated DAGNode Nodes = 1;
}

message MarkDAGNodeDone {
  string NodeId = 1;
  string SessionId = 2;
}

message Message {
  CommandType Type = 1;
  oneof Command {
    Ack Ack = 2;
    Ready Ready = 3;
    AppendData AppendData = 4;
    AppendActor AppendActor = 5;
    AppendPyFunc AppendPyFunc = 6;
    AppendPyClass AppendPyClass = 7;
    AppendArg AppendArg = 8;
    AppendClassMethodArg AppendClassMethodArg = 9;
    Invoke Invoke = 10;
    ReturnResult ReturnResult = 11;
    RegisterRequest RegisterRequest = 12;
    DAG DAG = 13;
    MarkDAGNodeDone MarkDAGNodeDone = 14;
  }
}

service Service {
  rpc Session(stream Message) returns (stream Message) {}
}
